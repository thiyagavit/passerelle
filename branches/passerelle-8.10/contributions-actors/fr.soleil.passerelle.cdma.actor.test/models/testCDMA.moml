<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="testCDMA" class="com.isencia.passerelle.model.Flow">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="7.0.1">
    </property>
    <property name="Passerelle ET" class="com.isencia.passerelle.domain.et.ETDirector">
        <property name="_editorFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorFactory">
        </property>
        <property name="_editorPaneFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorPaneFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{170, 45}">
        </property>
    </property>
    <entity name="CDMADataSetReader" class="fr.soleil.passerelle.cdma.actor.CDMADataSetReader">
        <property name="DataSet URI" class="ptolemy.data.expr.StringParameter" value="C:/data/workspaces/CDMA-plain/fr.soleil.passerelle.cdma.actor.test/CDMA_samples/GrCu_2012-04-07_12-12-28.nxs">
        </property>
        <property name="_controllerFactory" class="com.isencia.passerelle.actor.gui.PasserelleActorControllerFactory">
        </property>
        <property name="_editorFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorFactory">
        </property>
        <property name="_editorPaneFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorPaneFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 170.0]">
        </property>
    </entity>
    <entity name="CDMADataSetSlicer" class="fr.soleil.passerelle.cdma.actor.CDMADataSetSlicer">
        <property name="Slice rank" class="ptolemy.data.expr.Parameter" value="1">
        </property>
        <property name="_controllerFactory" class="com.isencia.passerelle.actor.gui.PasserelleActorControllerFactory">
        </property>
        <property name="_editorFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorFactory">
        </property>
        <property name="_editorPaneFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorPaneFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[480.0, 180.0]">
        </property>
    </entity>
    <entity name="Constant" class="com.isencia.passerelle.actor.general.Const">
        <property name="value" class="ptolemy.data.expr.StringParameter" value="done slicing">
        </property>
        <property name="_version" class="ptolemy.kernel.attributes.VersionAttribute" value="8.1.0">
        </property>
        <property name="_controllerFactory" class="com.isencia.passerelle.actor.gui.PasserelleActorControllerFactory">
        </property>
        <property name="_editorFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorFactory">
        </property>
        <property name="_editorPaneFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorPaneFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[650.0, 180.0]">
        </property>
    </entity>
    <entity name="Tracer Console_2" class="com.isencia.passerelle.actor.general.TracerConsole">
        <property name="_version" class="ptolemy.kernel.attributes.VersionAttribute" value="8.1.0">
        </property>
        <property name="_controllerFactory" class="com.isencia.passerelle.actor.gui.PasserelleActorControllerFactory">
        </property>
        <property name="_editorFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorFactory">
        </property>
        <property name="_editorPaneFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorPaneFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[800.0, 190.0]">
        </property>
    </entity>
    <entity name="Dumper after change" class="fr.soleil.passerelle.cdma.actor.CDMAArrayValueDumper">
        <property name="Chop output at #values" class="ptolemy.data.expr.Parameter" value="100">
        </property>
        <property name="_controllerFactory" class="com.isencia.passerelle.actor.gui.PasserelleActorControllerFactory">
        </property>
        <property name="_editorFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorFactory">
        </property>
        <property name="_editorPaneFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorPaneFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[760.0, 335.0]">
        </property>
    </entity>
    <entity name="CDMADataItemSelector" class="fr.soleil.passerelle.cdma.actor.CDMADataItemSelector">
        <property name="Item name" class="ptolemy.data.expr.StringParameter" value="GrCu_4_H_1/Scienta_0_84/data1">
        </property>
        <property name="Logical selection mode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_controllerFactory" class="com.isencia.passerelle.actor.gui.PasserelleActorControllerFactory">
        </property>
        <property name="_editorFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorFactory">
        </property>
        <property name="_editorPaneFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorPaneFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[275.0, 180.0]">
        </property>
    </entity>
    <entity name="CDMAArrayImageJTransformer" class="fr.soleil.passerelle.ij.actor.CDMAArrayImageJTransformer">
        <property name="Spectrum buffer size" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="Macro" class="ptolemy.data.expr.StringParameter" value="// HEADER_START&#10;// description: The goal of this macro is to average spectrums that share the same kind of name&#10;// parameter_count : 1&#10;// parameter_0_description : spectrums to average&#10;// parameter_0_type : floatspectrum&#10;// parameter_0_cardinality : n&#10;// result_count : 1&#10;// result_0_description : resulting averages&#10;// result_0_type : floatspectrum&#10;// result_0_cardinality : n&#10;// HEADER_END&#10;&#10;// The goal of this macro is to average spectrums that share the same kind of name&#10;// If spectrum names are like &quot;sigma&quot;, a quadratic average is done instead&#10;// Spectrums should be listed that way &quot;spectrum1\nspectrum2\n...\nspectrumn&quot;&#10;// Each spectrum should be formated that way : &quot;name:value&quot;&#10;// Each value should be formated that way : &quot;element1;element2;...;elementn&quot;&#10;&#10;Ext.install(&quot;fr.soleil.ij.macro.adapter.MacroDoubleSpectrumAdapter&quot;);&#10;var DEFAULT_EXT = &quot;_avg_&quot; + call(&quot;java.lang.System.currentTimeMillis&quot;) + &quot;_&quot; + random();&#10;&#10;arg = getArgument();&#10;&#10;isTest = false;&#10;&#10;if (lengthOf(arg) == 0) {&#10;  arg = &quot;radialIntensity:1;2;3\nsigma:1;2;3\nradialIntensitySum:1;2;3\nsigmaSum:1;2;3&quot;;&#10;  isTest = true;&#10;}&#10;if (isTest) print(&quot;Argument:\n----------\n&quot; + arg + &quot;\n----------&quot;);&#10;&#10;names = newArray(7);&#10;names[0] = &quot;RadialIntensity&quot;;&#10;names[1] = &quot;Sigma&quot;;&#10;names[2] = &quot;sum&quot;;&#10;names[3] = &quot;meanSum&quot;;&#10;names[4] = &quot;projection&quot;;&#10;names[5] = &quot;meanProjection&quot;;&#10;names[6] = &quot;Q&quot;;&#10;nameLength = lengthOf(names);&#10;realNames = newArray(nameLength);&#10;spectrumLists = newArray(nameLength);&#10;// &quot;spectrumLists&quot; is an array that contains the list of keys of the spectrums to average&#10;// This means:  at each index, the value is a string. This string is a concatenation of keys,&#10;// all keys separated by &quot;\n&quot;.&#10;&#10;// &quot;names&quot; is an array of string, that contains the reference names of the groups of spectrums to average.&#10;// This means: at each index, the value is a string. This string is in fact a name.&#10;// All the spectrums registered in &quot;spectrumLists&quot; at the same index have a name that looks like this name.&#10;&#10;// &quot;realNames&quot; is an array of string, that contains the list of names of the spectrums to average&#10;// This means:  at each index, the value is a string. This string is a concatenation of names,&#10;// all names separated by &quot;\n&quot;.&#10;&#10;for (i=0; i &lt; nameLength; i++) {&#10;  spectrumLists[i] = &quot;&quot;;&#10;  realNames[i] = &quot;&quot;;&#10;}&#10;&#10;spectrumArray = splitParameterList(arg, &quot;'Macro Argument'&quot;);&#10;&#10;splited = &quot;&quot;;&#10;for (i=0; i &lt; lengthOf(spectrumArray); i++) {&#10;  splited = extractNameAndKey(spectrumArray[i],i); // splited = {name,key}&#10;  if (lengthOf(splited) != 2) {&#10;    exit(&quot;bad formated parameter at index &quot; + i);&#10;  }&#10;  else {&#10;    // parameter correctly formated&#10;    index = -1; // &quot;index&quot; is used to locate a name in the list&#10;    for (j=0; j &lt; lengthOf(names); j++) {&#10;      if ( isSimilar(names[j], splited[0]) ) {&#10;        // The name was found: &quot;index&quot; can set to the index in the list&#10;        index = j;&#10;      }&#10;    }&#10;    if (index == -1) {&#10;      // need to register a new spectrum name&#10;      index = lengthOf(names);&#10;      tempNames = newArray(lengthOf(names)+1);&#10;      tempRealNames = newArray(lengthOf(names)+1);&#10;      tempSpectrumLists = newArray(lengthOf(spectrumLists)+1);&#10;      for (j=0; j &lt; lengthOf(names); j++) {&#10;        tempNames[j] = names[j];&#10;        tempRealNames[i] = realNames[i];&#10;        tempSpectrumLists[j] = spectrumLists[j];&#10;      }&#10;      tempNames[index] = splited[0];&#10;      tempRealNames[index] = &quot;&quot;;&#10;      tempSpectrumLists[index] = &quot;&quot;;&#10;      names = tempNames;&#10;      realNames = tempRealNames;&#10;      spectrumLists = tempSpectrumLists;&#10;    }&#10;    // add spectrum in corresponding list&#10;    if (lengthOf(spectrumLists[index]) == 0) {&#10;      spectrumLists[index] = splited[1];&#10;    }&#10;    else {&#10;      spectrumLists[index] = spectrumLists[index] + &quot;\n&quot; + splited[1];&#10;    }&#10;    if (lengthOf(realNames[index]) == 0) {&#10;      // check the name&#10;      toTest = splited[0];&#10;      openIndex = indexOf(toTest,&quot;(&quot;);&#10;      slashIndex = indexOf(toTest,&quot;/&quot;);&#10;      openSplit = split(toTest,&quot;(&quot;);&#10;      slashSplit = split(toTest,&quot;/&quot;);&#10;      if (lengthOf(openSplit) == 2) {&#10;        if (lengthOf(slashSplit) == 2) {&#10;          if (openIndex &lt; slashIndex) {&#10;            if (indexOf(toTest,&quot;)&quot;) == lengthOf(toTest) - 1) {&#10;              // The name looks like an Image Operation Result name : store it&#10;              toTest = substring(toTest, 0, slashIndex) + &quot;)&quot;;&#10;              realNames[index] = toTest;&#10;            }&#10;          }&#10;        }&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;for (i=0; i &lt; lengthOf(names); i++) {&#10;  // The &quot;&quot; before the call to a funtion is a workaround for an ImageJ bug.&#10;  // It looks like the only way to make ImageJ understand that the result of the function is a String.&#10;  if (isSimilar(&quot;Sigma&quot;,names[i])) {&#10;    spectrumLists[i] = &quot;&quot; + quadraticAverage( names[i], spectrumLists[i] );&#10;  }&#10;  else {&#10;    spectrumLists[i] = &quot;&quot; + average( names[i], spectrumLists[i] );&#10;  }&#10;}&#10;result = &quot;&quot;;&#10;for (i=0; i &lt; lengthOf(spectrumLists); i++) {&#10;  // ignore empty results&#10;  if (lengthOf(spectrumLists[i]) &gt; 0) {&#10;    if (lengthOf(result) &gt; 0) {&#10;      result = result + &quot;\n&quot;;&#10;    }&#10;    name = names[i];&#10;    if (lengthOf(realNames[i]) &gt; 0) {&#10;      name = realNames[i];&#10;    }&#10;    result = result + name + &quot;Average:&quot; + spectrumLists[i];&#10;  }&#10;}&#10;if (isTest) print(&quot;Result:\n----------\n&quot; + result + &quot;\n----------&quot;);&#10;return result;&#10;&#10;&#10;// ///////// //&#10;// FUNCTIONS //&#10;// ///////// //&#10;&#10;// funtion that splits a global macro argument in sub arguments&#10;function splitArguments(globalArgument) {&#10;  if (lengthOf(globalArgument) == 0) {&#10;    exit(&quot;splitArguments : Argument is not valid&quot;);&#10;  }&#10;  else {&#10;    splited = split(globalArgument,&quot;#####&quot;);&#10;    return splited;&#10;  }&#10;}&#10;&#10;// funtion that splits a global macro argument in sub arguments&#10;function splitParameterList(parameter, index) {&#10;  if (lengthOf(parameter) == 0) {&#10;    exit(&quot;splitParameterList : Argument &quot; + index + &quot; is not valid&quot;);&#10;  }&#10;  else {&#10;    splited = split(parameter,&quot;\n&quot;);&#10;    return splited;&#10;  }&#10;}&#10;&#10;// funtion that extracts and returns an array of length 2, containing the name of the argument as 1st value, and the corresponding key as 2nd&#10;function extractNameAndKey(stringArgument, index) {&#10;  if (lengthOf(stringArgument) == 0) {&#10;    exit(&quot;extractKey : Argument &quot; + index + &quot; is not valid&quot;);&#10;  }&#10;  else {&#10;    separatorIndex = indexOf(stringArgument, &quot;:&quot;);&#10;    if (separatorIndex &lt; 1) {&#10;      exit(&quot;extractKey : Argument &quot; + index + &quot; is not correctly formatted&quot;);&#10;    }&#10;    else {&#10;      result = newArray(2);&#10;      length = lengthOf(stringArgument);&#10;      result[0] = substring(stringArgument,0,separatorIndex);&#10;      result[0] = &quot;&quot; + trimString(result[0]);&#10;      result[1] = substring(stringArgument,separatorIndex+1,length);&#10;      result[1] = &quot;&quot; + trimString(result[1]);&#10;      return result;&#10;    }&#10;  }&#10;}&#10;&#10;// funtion that extracts and returns the key value of an argument&#10;function extractKey(stringArgument, index) {&#10;  if (lengthOf(stringArgument) == 0) {&#10;    exit(&quot;extractKey : Argument &quot; + index + &quot; is not valid&quot;);&#10;  }&#10;  else {&#10;    separatorIndex = indexOf(stringArgument, &quot;:&quot;);&#10;    if (separatorIndex &lt; 1) {&#10;      exit(&quot;extractKey : Argument &quot; + index + &quot; is not correctly formatted&quot;);&#10;    }&#10;    else {&#10;      length = lengthOf(stringArgument);&#10;      return substring(stringArgument,separatorIndex+1,length);&#10;    }&#10;  }&#10;}&#10;&#10;// funtion that extracts and returns the int value of an argument&#10;function extractIntScalar(stringArgument, index) {&#10;  if (lengthOf(stringArgument) == 0) {&#10;    exit(&quot;extractIntScalar : Argument &quot; + index + &quot; is not valid&quot;);&#10;  }&#10;  else {&#10;    splited = split(stringArgument,&quot;:&quot;);&#10;    if (lengthOf(splited) != 2) {&#10;      exit(&quot;extractIntScalar : Argument &quot; + index + &quot; is not correctly formatted&quot;);&#10;    }&#10;    else {&#10;      value = splited[1];&#10;      result = parseInt(value);&#10;      if ( isNaN(result) ) {&#10;        exit(&quot;extractIntScalar : Argument &quot; + index + &quot; is not correctly formatted&quot;);&#10;      }&#10;      return result;&#10;    }&#10;  }&#10;}&#10;&#10;// funtion that extracts and returns the float value of an argument&#10;function extractFloatScalar(stringArgument, index) {&#10;  if (lengthOf(stringArgument) == 0) {&#10;    exit(&quot;extractFloatScalar : Argument &quot; + index + &quot; is not valid&quot;);&#10;  }&#10;  else {&#10;    splited = split(stringArgument,&quot;:&quot;);&#10;    if (lengthOf(splited) != 2) {&#10;      exit(&quot;extractFloatScalar : Argument &quot; + index + &quot; is not correctly formatted&quot;);&#10;    }&#10;    else {&#10;      value = splited[1];&#10;      result = parseFloat(value);&#10;      if ( isNaN(result) ) {&#10;        exit(&quot;extractFloatScalar : Argument &quot; + index + &quot; is not correctly formatted&quot;);&#10;      }&#10;      return result;&#10;    }&#10;  }&#10;}&#10;&#10;// funtion that extracts and returns the boolean value of a string argument&#10;function extractBooleanScalar(stringArgument, index) {&#10;  if (lengthOf(stringArgument) == 0) {&#10;    exit(&quot;extractBooleanScalar : Argument &quot; + index + &quot; is not valid&quot;);&#10;  }&#10;  else {&#10;    splited = split(stringArgument,&quot;:&quot;);&#10;    if (lengthOf(splited) != 2) {&#10;      exit(&quot;extractBooleanScalar : Argument &quot; + index + &quot; is not correctly formatted&quot;);&#10;    }&#10;    else {&#10;      value = splited[1];&#10;      result = (value==&quot;true&quot;);&#10;      return result;&#10;    }&#10;  }&#10;}&#10;&#10;//function that looks in the array for the index of the specified value &#10;function getIndex(array, value) {&#10;  length = lengthOf(array);&#10;  found = false;&#10;  index = -1;&#10;  for (i = 0; (i &lt; length) &amp;&amp; (found == false); i++) {&#10;    if (array[i] == value) {&#10;      index = i;&#10;      found = true;&#10;    }&#10;  }&#10;  return index;&#10;}&#10;&#10;//function that looks in the array for the index of the specified value &#10;function getIndexDicho(sortedArray, value) {&#10;  length = lengthOf(sortedArray);&#10;  found = false;&#10;  index = -1;&#10;  b = 0;&#10;  e = length - 1;&#10;  do {&#10;	  i = (b + e) / 2;&#10;	  if (sortedArray[i] == value) {&#10;		  found = true;&#10;		  index = i;&#10;	  }&#10;	  else {&#10;		  if (sortedArray[i] &lt; value) {&#10;			  b = i + 1;&#10;		  }&#10;		  else {&#10;			  e = i + 1;&#10;		  }&#10;	  }&#10;  }&#10;  while (b &lt; e &amp;&amp; !found);&#10;  return index;&#10;}&#10;&#10;function floatArrayToString(array) {&#10;  result = &quot;&quot;;&#10;  length = lengthOf(array);&#10;  for (i=0; i &lt; length; i++) {&#10;    if (i &gt; 0) {&#10;      result = result +&quot;;&quot;;&#10;    }&#10;    result = result + array[i];&#10;  }&#10;  return result;&#10;}&#10;&#10;function average(name, spectrumList) {&#10;  if (lengthOf(spectrumList) == 0) return &quot;&quot;;&#10;  result = &quot;&quot;;&#10;  spectrumArray = splitParameterList(spectrumList,name);&#10;  spectrumCount = lengthOf(spectrumArray);&#10;  temp = 0.5;&#10;  Ext.setDoubleSpectrumKey(spectrumArray[0]);&#10;  Ext.getDoubleSpectrumLength(temp);&#10;  length = temp;&#10;  spectrum = newArray(length);&#10;  for (i=0; i &lt; length; i++) {&#10;    Ext.setDoubleSpectrumIndex(i);&#10;    Ext.getDoubleValueAtSelectedSpectrumIndex(temp);&#10;    spectrum[i] = temp;&#10;  }&#10;  for (si=1; si &lt; spectrumCount; si++) {&#10;    // try to sum spectrums&#10;    Ext.setDoubleSpectrumKey(spectrumArray[si]);&#10;    Ext.getDoubleSpectrumLength(temp);&#10;    tempLength = temp;&#10;    if (tempLength != length) {&#10;      // incompatible spectrums : exit&#10;      th = &quot;th&quot;;&#10;      if (si == 1) {&#10;        th = &quot;nd&quot;;&#10;      }&#10;      exit(&quot;The &quot; + (si+1) + th + &quot; spectrum of name similar to \&quot;&quot; + name + &quot;\&quot; is not compatible with other ones:\nIts length is &quot; + tempLength + &quot; instead of &quot; + length);&#10;    }&#10;    else {&#10;      // sum spectrums&#10;      for (i=0; i &lt; length; i++) {&#10;        Ext.setDoubleSpectrumIndex(i);&#10;        Ext.getDoubleValueAtSelectedSpectrumIndex(temp);&#10;        spectrum[i] = spectrum[i] + temp;&#10;      }&#10;    }&#10;  }&#10;  // Ones sum is done, divide by the number of spectrums&#10;  for (i=0; i &lt; length; i++) {&#10;    spectrum[i] = spectrum[i] / spectrumCount;&#10;  }&#10;  key = name + DEFAULT_EXT;&#10;  // register the spectrum&#10;  Ext.setDoubleSpectrumKey(key);&#10;  Ext.setDoubleSpectrum(spectrum);&#10;  // return the key&#10;  return key;&#10;}&#10;&#10;function quadraticAverage(name, spectrumList) {&#10;  if (lengthOf(spectrumList) == 0) return &quot;&quot;;&#10;  result = &quot;&quot;;&#10;  spectrumArray = splitParameterList(spectrumList,name);&#10;  spectrumCount = lengthOf(spectrumArray);&#10;  temp = 0.5;&#10;  Ext.setDoubleSpectrumKey(spectrumArray[0]);&#10;  Ext.getDoubleSpectrumLength(temp);&#10;  length = temp;&#10;  spectrum = newArray(length);&#10;  for (i=0; i &lt; length; i++) {&#10;    Ext.setDoubleSpectrumIndex(i);&#10;    Ext.getDoubleValueAtSelectedSpectrumIndex(temp);&#10;    spectrum[i] = square(temp);&#10;  }&#10;  for (si=1; si &lt; spectrumCount; si++) {&#10;    // try to sum spectrums squares&#10;    Ext.setDoubleSpectrumKey(spectrumArray[si]);&#10;    Ext.getDoubleSpectrumLength(temp);&#10;    tempLength = temp;&#10;    if (tempLength != length) {&#10;      // incompatible spectrums : exit&#10;      th = &quot;th&quot;;&#10;      if (si == 1) {&#10;        th = &quot;nd&quot;;&#10;      }&#10;      exit(&quot;The &quot; + (si+1) + th + &quot; spectrum of name similar to \&quot;&quot; + name + &quot;\&quot; is not compatible with other ones:\nIts length is &quot; + tempLength + &quot; instead of &quot; + length);&#10;    }&#10;    else {&#10;      // sum spectrums squares&#10;      for (i=0; i &lt; length; i++) {&#10;        Ext.setDoubleSpectrumIndex(i);&#10;        Ext.getDoubleValueAtSelectedSpectrumIndex(temp);&#10;        spectrum[i] = spectrum[i] + square(temp);&#10;      }&#10;    }&#10;  }&#10;  // Ones square sum is done, divide its square root by the number of spectrums&#10;  for (i=0; i &lt; length; i++) {&#10;    spectrum[i] = sqrt(spectrum[i]) / spectrumCount;&#10;  }&#10;  key = name + DEFAULT_EXT;&#10;  // register the spectrum&#10;  Ext.setDoubleSpectrumKey(key);&#10;  Ext.setDoubleSpectrum(spectrum);&#10;  // return the key&#10;  return key;&#10;}&#10;&#10;function square(value) {&#10;  return (value*value);&#10;}&#10;&#10;function isSimilar(name1, name2) {&#10;  return ( (indexOf(name2,name1) == 0) || (indexOf(name1,name2) == 0) );&#10;}&#10;&#10;function trimString(stringToTrim) {&#10;  result = &quot;&quot; + stringToTrim;&#10;  while ( startsWith(result, &quot; &quot;)&#10;          || startsWith(result, &quot;\t&quot;)&#10;          || startsWith(result, &quot;\r&quot;)&#10;          || startsWith(result, &quot;\n&quot;) ) {&#10;    length = lengthOf(result);&#10;    result = substring(result, 1, length);&#10;  }&#10;  while ( endsWith(result, &quot; &quot;)&#10;          || endsWith(result, &quot;\t&quot;)&#10;          || endsWith(result, &quot;\r&quot;)&#10;          || endsWith(result, &quot;\n&quot;) ) {&#10;    length = lengthOf(result);&#10;    result = substring(result, 0, length - 1);&#10;  }&#10;  return result;&#10;}&#10;">
        </property>
        <property name="_controllerFactory" class="com.isencia.passerelle.actor.gui.PasserelleActorControllerFactory">
        </property>
        <property name="_editorFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorFactory">
        </property>
        <property name="_editorPaneFactory" class="com.isencia.passerelle.actor.gui.PasserelleEditorPaneFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[550.0, 335.0]">
        </property>
    </entity>
    <relation name="relation_5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
    </relation>
    <relation name="relation_6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
    </relation>
    <relation name="relation_10" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
    </relation>
    <relation name="relation_3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
    </relation>
    <relation name="relation_7" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
    </relation>
    <relation name="relation_4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
    </relation>
    <link port="CDMADataSetReader.output" relation="relation_10"/>
    <link port="CDMADataSetSlicer.input" relation="relation_3"/>
    <link port="CDMADataSetSlicer.next" relation="relation_4"/>
    <link port="CDMADataSetSlicer.end" relation="relation_5"/>
    <link port="CDMADataSetSlicer.output" relation="relation"/>
    <link port="Constant.output" relation="relation_6"/>
    <link port="Constant.trigger" relation="relation_5"/>
    <link port="Tracer Console_2.input" relation="relation_6"/>
    <link port="Dumper after change.input" relation="relation_7"/>
    <link port="CDMADataItemSelector.input" relation="relation_10"/>
    <link port="CDMADataItemSelector.output" relation="relation_3"/>
    <link port="CDMAArrayImageJTransformer.input" relation="relation"/>
    <link port="CDMAArrayImageJTransformer.output" relation="relation_7"/>
    <link port="CDMAArrayImageJTransformer.forward" relation="relation_4"/>
</entity>
